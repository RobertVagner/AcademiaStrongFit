// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using trabalho.Models;

#nullable disable

namespace trabalho.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("trabalho.Models.Aluno", b =>
                {
                    b.Property<int>("AlunoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlunoId"));

                    b.Property<DateTime>("Data_Nascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacoes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PersonalId")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AlunoId");

                    b.HasIndex("PersonalId");

                    b.ToTable("Alunos");
                });

            modelBuilder.Entity("trabalho.Models.Categoria", b =>
                {
                    b.Property<int>("CategoriaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoriaID"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaID");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("trabalho.Models.Exercicio", b =>
                {
                    b.Property<int>("ExercicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExercicioId"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TreinoExercicioId")
                        .HasColumnType("int");

                    b.HasKey("ExercicioId");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("TreinoExercicioId");

                    b.ToTable("Exercicios");
                });

            modelBuilder.Entity("trabalho.Models.Personal", b =>
                {
                    b.Property<int>("PersonalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonalId"));

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonalId");

                    b.ToTable("Personals");
                });

            modelBuilder.Entity("trabalho.Models.Treino", b =>
                {
                    b.Property<int>("TreinoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreinoId"));

                    b.Property<int>("AlunoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Hora")
                        .HasColumnType("datetime2");

                    b.Property<int>("TreinoExercicioId")
                        .HasColumnType("int");

                    b.HasKey("TreinoId");

                    b.HasIndex("AlunoId");

                    b.HasIndex("TreinoExercicioId");

                    b.ToTable("Treinos");
                });

            modelBuilder.Entity("trabalho.Models.TreinoExercicio", b =>
                {
                    b.Property<int>("TreinoExercicioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TreinoExercicioId"));

                    b.Property<int>("ExercicioId")
                        .HasColumnType("int");

                    b.HasKey("TreinoExercicioId");

                    b.HasIndex("ExercicioId");

                    b.ToTable("TreinoExercicios");
                });

            modelBuilder.Entity("trabalho.Models.Aluno", b =>
                {
                    b.HasOne("trabalho.Models.Personal", "Personal")
                        .WithMany("Alunos")
                        .HasForeignKey("PersonalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personal");
                });

            modelBuilder.Entity("trabalho.Models.Exercicio", b =>
                {
                    b.HasOne("trabalho.Models.Categoria", "Categoria")
                        .WithMany("Exercicios")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("trabalho.Models.TreinoExercicio", null)
                        .WithMany("Exercicios")
                        .HasForeignKey("TreinoExercicioId");

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("trabalho.Models.Treino", b =>
                {
                    b.HasOne("trabalho.Models.Aluno", "Aluno")
                        .WithMany("Treinos")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("trabalho.Models.TreinoExercicio", "TreinoExercicio")
                        .WithMany("Treinos")
                        .HasForeignKey("TreinoExercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aluno");

                    b.Navigation("TreinoExercicio");
                });

            modelBuilder.Entity("trabalho.Models.TreinoExercicio", b =>
                {
                    b.HasOne("trabalho.Models.Exercicio", "Exercicio")
                        .WithMany()
                        .HasForeignKey("ExercicioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercicio");
                });

            modelBuilder.Entity("trabalho.Models.Aluno", b =>
                {
                    b.Navigation("Treinos");
                });

            modelBuilder.Entity("trabalho.Models.Categoria", b =>
                {
                    b.Navigation("Exercicios");
                });

            modelBuilder.Entity("trabalho.Models.Personal", b =>
                {
                    b.Navigation("Alunos");
                });

            modelBuilder.Entity("trabalho.Models.TreinoExercicio", b =>
                {
                    b.Navigation("Exercicios");

                    b.Navigation("Treinos");
                });
#pragma warning restore 612, 618
        }
    }
}
